/**
 * Copyright (C) 2016 Michael Kourlas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var https = require("https");
var url_1 = require("url");
/**
 * Creates an HTTPS request to the specified URL.
 *
 * @param url The URL of the HTTP request.
 * @param callback Called when a response is received with any error that
 *                 occurred as well as the response and response body if one is
 *                 received.
 * @param method The HTTP method associated with the request.
 * @param headers An object containing the headers of the request.
 * @param body The body of the request.
 *
 * @private
 */
function httpsRequest(url, callback, method, headers, body) {
    if (method === void 0) { method = "GET"; }
    if (headers === void 0) { headers = {}; }
    var uri = url_1.parse(url);
    var options = {};
    options.protocol = uri.protocol;
    options.host = uri.host;
    options.auth = uri.auth;
    options.path = uri.path;
    if (uri.hash) {
        options.path += uri.hash;
    }
    options.method = method;
    options.headers = headers;
    if (method !== "GET") {
        options.headers["Content-Type"] = "application/json";
    }
    var request = https.request(options, function (response) {
        var responseBody = "";
        response.setEncoding("utf8");
        response.on("data", function (chunk) {
            responseBody += chunk;
        });
        response.on("end", function () {
            callback(undefined, response, responseBody);
        });
        response.on("error", function (error) {
            callback(error, response);
        });
    });
    request.on("error", function (error) {
        callback(error);
    });
    if (body) {
        request.end(body);
    }
    else {
        request.end();
    }
}
exports.httpsRequest = httpsRequest;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7O0FBR0gsNkJBQStCO0FBQy9CLDJCQUEwQjtBQUUxQjs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxzQkFBNkIsR0FBVyxFQUNYLFFBRWlDLEVBQ2pDLE1BQXNCLEVBQ3RCLE9BQXNDLEVBQ3RDLElBQWE7SUFGYix1QkFBQSxFQUFBLGNBQXNCO0lBQ3RCLHdCQUFBLEVBQUEsWUFBc0M7SUFHL0QsSUFBTSxHQUFHLEdBQUcsV0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXZCLElBQU0sT0FBTyxHQUF5QixFQUFFLENBQUM7SUFDekMsT0FBTyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0lBQ2hDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUN4QixPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDeEIsT0FBTyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3hCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFDRCxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN4QixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUUxQixFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuQixPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFDUCxVQUFDLFFBQThCO1FBQzNCLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV0QixRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUMsS0FBYTtZQUM5QixZQUFZLElBQUksS0FBSyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUU7WUFDZixRQUFRLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFDbkIsWUFBWSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLEtBQWE7WUFDL0IsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBYTtRQUM5QixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDSCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbEIsQ0FBQztBQUNMLENBQUM7QUFqREQsb0NBaURDIiwiZmlsZSI6InJlcXVlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoQykgMjAxNiBNaWNoYWVsIEtvdXJsYXNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGh0dHAgZnJvbSBcImh0dHBcIjtcbmltcG9ydCAqIGFzIGh0dHBzIGZyb20gXCJodHRwc1wiO1xuaW1wb3J0IHtwYXJzZX0gZnJvbSBcInVybFwiO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gSFRUUFMgcmVxdWVzdCB0byB0aGUgc3BlY2lmaWVkIFVSTC5cbiAqXG4gKiBAcGFyYW0gdXJsIFRoZSBVUkwgb2YgdGhlIEhUVFAgcmVxdWVzdC5cbiAqIEBwYXJhbSBjYWxsYmFjayBDYWxsZWQgd2hlbiBhIHJlc3BvbnNlIGlzIHJlY2VpdmVkIHdpdGggYW55IGVycm9yIHRoYXRcbiAqICAgICAgICAgICAgICAgICBvY2N1cnJlZCBhcyB3ZWxsIGFzIHRoZSByZXNwb25zZSBhbmQgcmVzcG9uc2UgYm9keSBpZiBvbmUgaXNcbiAqICAgICAgICAgICAgICAgICByZWNlaXZlZC5cbiAqIEBwYXJhbSBtZXRob2QgVGhlIEhUVFAgbWV0aG9kIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVxdWVzdC5cbiAqIEBwYXJhbSBoZWFkZXJzIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBoZWFkZXJzIG9mIHRoZSByZXF1ZXN0LlxuICogQHBhcmFtIGJvZHkgVGhlIGJvZHkgb2YgdGhlIHJlcXVlc3QuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0dHBzUmVxdWVzdCh1cmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IChlcnJvcj86IEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlPzogaHR0cC5JbmNvbWluZ01lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keT86IHN0cmluZykgPT4gdm9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7W25hbWU6IHN0cmluZ106IHN0cmluZ30gPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keT86IHN0cmluZyk6IHZvaWRcbntcbiAgICBjb25zdCB1cmkgPSBwYXJzZSh1cmwpO1xuXG4gICAgY29uc3Qgb3B0aW9uczogaHR0cHMuUmVxdWVzdE9wdGlvbnMgPSB7fTtcbiAgICBvcHRpb25zLnByb3RvY29sID0gdXJpLnByb3RvY29sO1xuICAgIG9wdGlvbnMuaG9zdCA9IHVyaS5ob3N0O1xuICAgIG9wdGlvbnMuYXV0aCA9IHVyaS5hdXRoO1xuICAgIG9wdGlvbnMucGF0aCA9IHVyaS5wYXRoO1xuICAgIGlmICh1cmkuaGFzaCkge1xuICAgICAgICBvcHRpb25zLnBhdGggKz0gdXJpLmhhc2g7XG4gICAgfVxuICAgIG9wdGlvbnMubWV0aG9kID0gbWV0aG9kO1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IGhlYWRlcnM7XG5cbiAgICBpZiAobWV0aG9kICE9PSBcIkdFVFwiKSB7XG4gICAgICAgIG9wdGlvbnMuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IFwiYXBwbGljYXRpb24vanNvblwiO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlc3BvbnNlOiBodHRwLkluY29taW5nTWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2VCb2R5ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZyhcInV0ZjhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLm9uKFwiZGF0YVwiLCAoY2h1bms6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VCb2R5ICs9IGNodW5rO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5vbihcImVycm9yXCIsIChlcnJvcj86IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICByZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgKGVycm9yPzogRXJyb3IpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgIH0pO1xuICAgIGlmIChib2R5KSB7XG4gICAgICAgIHJlcXVlc3QuZW5kKGJvZHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3QuZW5kKCk7XG4gICAgfVxufVxuIl19
